/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.AccountDto
import io.swagger.client.model.AuthenticateModel
import io.swagger.client.model.AuthenticateResultModel
import io.swagger.client.model.CreateAccountDto
import io.swagger.client.model.CreateAccountGroupDto
import io.swagger.client.model.CreateTenantDto
import java.io.File
import io.swagger.client.model.FilterAccountsDto
import io.swagger.client.model.FilterAuditLogsDto
import io.swagger.client.model.FilterTenantsDto
import io.swagger.client.model.GrantedPermissionsDto
import io.swagger.client.model.ListResultDtoAccountGroupDto
import io.swagger.client.model.ListResultDtoPermissionDto
import io.swagger.client.model.PagedResultDtoAccountsListDto
import io.swagger.client.model.PagedResultDtoAuditLogsListDto
import io.swagger.client.model.PagedResultDtoTenantListDto
import io.swagger.client.model.SettingsDto
import io.swagger.client.model.StartupDto
import io.swagger.client.model.TenantDto
import io.swagger.client.model.UpdateAccountDto
import io.swagger.client.model.UpdateAccountGroupDto
import io.swagger.client.model.UpdateTenantDto
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object DefaultApi {

  /**
   * 
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param createAccount 新建账户
   */
  def accountAdd(createAccount: Option[CreateAccountDto] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://langwenda.com:7000/mock/58", "/account", "application/json")
      .withBody(createAccount)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * Expected answers:
   *   code 200 :  (Succes)
   * 
   * @param accountId 账户Id
   */
  def accountDelete(accountId: Int): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "http://langwenda.com:7000/mock/58", "/account/{accountId}", "application/json")
      .withPathParam("accountId", accountId)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * Expected answers:
   *   code 200 : AccountDto (Succes)
   * 
   * @param accountId 账户Id
   */
  def accountGet(accountId: Int): ApiRequest[AccountDto] =
    ApiRequest[AccountDto](ApiMethods.GET, "http://langwenda.com:7000/mock/58", "/account/{accountId}", "application/json")
      .withPathParam("accountId", accountId)
      .withSuccessResponse[AccountDto](200)
        /**
   * 
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param createAccountGroup 
   */
  def accountGroupAdd(createAccountGroup: Option[CreateAccountGroupDto] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://langwenda.com:7000/mock/58", "/account-group", "application/json")
      .withBody(createAccountGroup)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * Expected answers:
   *   code 200 :  (Succes)
   * 
   * @param accountGroupId 账户组Id
   */
  def accountGroupDelete(accountGroupId: Int): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "http://langwenda.com:7000/mock/58", "/account-group/{accountGroupId}", "application/json")
      .withPathParam("accountGroupId", accountGroupId)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * Expected answers:
   *   code 200 : ListResultDtoAccountGroupDto (Success)
   */
  def accountGroupList(): ApiRequest[ListResultDtoAccountGroupDto] =
    ApiRequest[ListResultDtoAccountGroupDto](ApiMethods.GET, "http://langwenda.com:7000/mock/58", "/account-group/all", "application/json")
      .withSuccessResponse[ListResultDtoAccountGroupDto](200)
        /**
   * 
   * Expected answers:
   *   code 200 :  (Succes)
   * 
   * @param accountGroupId 账户组Id
   * @param updateAccountGroup 更新账户组
   */
  def accountGroupUpdate(accountGroupId: Int, updateAccountGroup: Option[UpdateAccountGroupDto] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "http://langwenda.com:7000/mock/58", "/account-group/{accountGroupId}", "application/json")
      .withBody(updateAccountGroup)
      .withPathParam("accountGroupId", accountGroupId)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * Expected answers:
   *   code 200 : PagedResultDtoAccountsListDto (Success)
   * 
   * @param filterAccounts 按照查询条件过滤租户
   */
  def accountList(filterAccounts: Option[FilterAccountsDto] = None): ApiRequest[PagedResultDtoAccountsListDto] =
    ApiRequest[PagedResultDtoAccountsListDto](ApiMethods.POST, "http://langwenda.com:7000/mock/58", "/account/searches", "application/json")
      .withBody(filterAccounts)
      .withSuccessResponse[PagedResultDtoAccountsListDto](200)
        /**
   * 
   * Expected answers:
   *   code 200 :  (Succes)
   * 
   * @param accountId 账户Id
   * @param updateAccount 更新账户
   */
  def accountUpdate(accountId: Int, updateAccount: Option[UpdateAccountDto] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "http://langwenda.com:7000/mock/58", "/account", "application/json")
      .withBody(updateAccount)
      .withPathParam("accountId", accountId)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (successful operation)
   * 
   * @param accountId ID of Account to update
   * @param additionalMetadata Additional data to pass to server
   * @param file file to upload
   */
  def accountUploadImage(accountId: Long, additionalMetadata: Option[String] = None, file: Option[File] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://langwenda.com:7000/mock/58", "/account/{accountId}/upload-image", "multipart/form-data")
      .withFormParam("additionalMetadata", additionalMetadata)
      .withFormParam("file", file)
      .withPathParam("accountId", accountId)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * Expected answers:
   *   code 200 : PagedResultDtoAuditLogsListDto (Success)
   * 
   * @param filterAuditLogs 按照查询条件过滤审计日志
   */
  def auditLogList(filterAuditLogs: Option[FilterAuditLogsDto] = None): ApiRequest[PagedResultDtoAuditLogsListDto] =
    ApiRequest[PagedResultDtoAuditLogsListDto](ApiMethods.POST, "http://langwenda.com:7000/mock/58", "/audit-log/searches", "application/json")
      .withBody(filterAuditLogs)
      .withSuccessResponse[PagedResultDtoAuditLogsListDto](200)
        /**
   * 
   * Expected answers:
   *   code 200 : AuthenticateResultModel (Success)
   * 
   * @param authenticateModel 
   */
  def passportAuthenticate(authenticateModel: Option[AuthenticateModel] = None): ApiRequest[AuthenticateResultModel] =
    ApiRequest[AuthenticateResultModel](ApiMethods.POST, "http://langwenda.com:7000/mock/58", "/passport/authenticate", "application/json")
      .withBody(authenticateModel)
      .withSuccessResponse[AuthenticateResultModel](200)
        /**
   * 
   * Expected answers:
   *   code 200 : ListResultDtoPermissionDto (Success)
   */
  def permissionListAll(): ApiRequest[ListResultDtoPermissionDto] =
    ApiRequest[ListResultDtoPermissionDto](ApiMethods.GET, "http://langwenda.com:7000/mock/58", "/permission/all", "application/json")
      .withSuccessResponse[ListResultDtoPermissionDto](200)
        /**
   * 
   * Expected answers:
   *   code 200 : ListResultDtoPermissionDto (Success)
   * 
   * @param accountGroupId 账户组Id
   */
  def permissionListByAccountGroupId(accountGroupId: Int): ApiRequest[ListResultDtoPermissionDto] =
    ApiRequest[ListResultDtoPermissionDto](ApiMethods.GET, "http://langwenda.com:7000/mock/58", "/permission/account-group/{accountGroupId}", "application/json")
      .withPathParam("accountGroupId", accountGroupId)
      .withSuccessResponse[ListResultDtoPermissionDto](200)
        /**
   * 
   * Expected answers:
   *   code 200 : ListResultDtoPermissionDto (Success)
   * 
   * @param accountId 账户Id
   */
  def permissionListByAccountId(accountId: Int): ApiRequest[ListResultDtoPermissionDto] =
    ApiRequest[ListResultDtoPermissionDto](ApiMethods.GET, "http://langwenda.com:7000/mock/58", "/permission/account/{accountId}", "application/json")
      .withPathParam("accountId", accountId)
      .withSuccessResponse[ListResultDtoPermissionDto](200)
        /**
   * 
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param accountGroupId 账户组Id
   * @param updateAccountGroupPermission 更新账户组权限
   */
  def permissionUpdateAccountGroupPermissions(accountGroupId: Int, updateAccountGroupPermission: Option[GrantedPermissionsDto] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://langwenda.com:7000/mock/58", "/permission/account-group/{accountGroupId}", "application/json")
      .withBody(updateAccountGroupPermission)
      .withPathParam("accountGroupId", accountGroupId)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param accountId 账户Id
   * @param updateAccountPermission 更新账户权限
   */
  def permissionUpdateAccountPermissions(accountId: Int, updateAccountPermission: Option[GrantedPermissionsDto] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://langwenda.com:7000/mock/58", "/permission/account/{accountId}", "application/json")
      .withBody(updateAccountPermission)
      .withPathParam("accountId", accountId)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * Expected answers:
   *   code 200 : SettingsDto (Success)
   */
  def settingsListAll(): ApiRequest[SettingsDto] =
    ApiRequest[SettingsDto](ApiMethods.GET, "http://langwenda.com:7000/mock/58", "/settings/all", "application/json")
      .withSuccessResponse[SettingsDto](200)
        /**
   * 
   * Expected answers:
   *   code 200 : StartupDto (Success)
   */
  def settingsStartup(): ApiRequest[StartupDto] =
    ApiRequest[StartupDto](ApiMethods.GET, "http://langwenda.com:7000/mock/58", "/settings/startup", "application/json")
      .withSuccessResponse[StartupDto](200)
        /**
   * 
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param updateTenantAllSettings 更新账户组权限
   */
  def settingsUpdateAll(updateTenantAllSettings: Option[SettingsDto] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://langwenda.com:7000/mock/58", "/settings/all", "application/json")
      .withBody(updateTenantAllSettings)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param createTenantDto 
   */
  def tenantAdd(createTenantDto: Option[CreateTenantDto] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://langwenda.com:7000/mock/58", "/tenant", "application/json")
      .withBody(createTenantDto)
      .withSuccessResponse[Unit](200)
        /**
   * 
   * Expected answers:
   *   code 200 : TenantDto (Success)
   * 
   * @param tenantId 租户Id
   */
  def tenantGet(tenantId: Int): ApiRequest[TenantDto] =
    ApiRequest[TenantDto](ApiMethods.GET, "http://langwenda.com:7000/mock/58", "/tenant/{tenantId}", "application/json")
      .withPathParam("tenantId", tenantId)
      .withSuccessResponse[TenantDto](200)
        /**
   * 
   * Expected answers:
   *   code 200 : PagedResultDtoTenantListDto (Success)
   * 
   * @param filterTenants 按照查询条件过滤租户
   */
  def tenantList(filterTenants: Option[FilterTenantsDto] = None): ApiRequest[PagedResultDtoTenantListDto] =
    ApiRequest[PagedResultDtoTenantListDto](ApiMethods.POST, "http://langwenda.com:7000/mock/58", "/tenant/searches", "application/json")
      .withBody(filterTenants)
      .withSuccessResponse[PagedResultDtoTenantListDto](200)
        /**
   * 
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param tenantId 租户Id
   * @param updateTenantDto 
   */
  def tenantUpdate(tenantId: Int, updateTenantDto: Option[UpdateTenantDto] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "http://langwenda.com:7000/mock/58", "/tenant/{tenantId}", "application/json")
      .withBody(updateTenantDto)
      .withPathParam("tenantId", tenantId)
      .withSuccessResponse[Unit](200)
      

}

